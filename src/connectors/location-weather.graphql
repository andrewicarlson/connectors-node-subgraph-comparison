extend schema
  @link(
    url: "https://specs.apollo.dev/federation/v2.10"
    import: ["@key", "@requires"]
  )
  @link(
    url: "https://specs.apollo.dev/connect/v0.1"
    import: ["@source", "@connect"]
  )
  @source(
    name: "trimblemaps"
    http: {
      baseURL: "https://singlesearch.alk.com/"
      headers: [{ name: "Authorization", value: "{$config.trimbleApiKey}" }]
    }
  )
  @source(
    name: "weatherdata"
      http: {
      baseURL: "https://weather.visualcrossing.com/"
      }
  )

type LWAddress {
  shortFormatted: String
  timezone: String!
  country: String!
  city: String!
  weather: Weather!
    @connect(
        source: "weatherdata"
        http: { GET: "/VisualCrossingWebServices/rest/services/timeline/{$this.city},{$this.country}?key={$config.visualCrossingApiKey}&include=current&unitGroup=uk" }
        selection: """
        $.currentConditions
        {
        snow
        temperature: temp
        windSpeed: windspeed
        conditions
        }
        """
      )
}

type Weather {
  temperature: Float
  snow: Float
  windSpeed: Float
  conditions: String
}

type Query {
  """
  PC*Miler Web Services - Single Search - https://developer.trimblemaps.com/restful-apis/location/single-search/single-search-api/
  """
  connectorAddressAndWeather(lat: String!, long: String!): LWAddress
    @connect(
      source: "trimblemaps"
      http: {
        GET: "ww/api/search?query={$args.lat},{$args.long}&matchNamedRoadsOnly=true&maxCleanupMiles=0.2"
      }
      selection: """
      shortFormatted:Locations->first.ShortString
      timezone:Locations->first.TimeZone
      city:Locations->first.Address.City
      country:Locations->first.Address.CountryFullName
      """
    )
}